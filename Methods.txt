uint16_t Player::ThrowSingle(uint16_t d, const Board& board)
{
	//return result of throwing for single d
	//d is the score that the player is aiming for

	srand(static_cast<unsigned int>(time(0)));

	uint16_t r = (rand() % 100 + 1);

	if (d == OUTER) // outer bull 80% accuracy
	{
		if (r <= 80) //80% chance
		{
			HitOuter = true;
			return OUTER; //throw was successful
		}
		else if (r > 80 && r <= 90) //10% chance
		{
			HitBull = true;
			return BULL; //red inner bull hit instead
		}
		else
		{
			return (rand() % 20 + 1); //return a random score between 1 and 20
		}
	}

	else if (d == BULL) // outer  bull 80% accuracy
	{
		if (r <= 80) //80% chance
		{
			HitBull = true;
			return BULL; //throw was successful
		} 
		else if (r > 80 && r <= 90) //10% chance
		{
			HitOuter = true;
			return OUTER; //outer bull hit instead
		} 
		else
		{
			return (rand() % 20 + 1); //return a random score between 1 and 20
		} 
	}

	else if (r <= 70) // 70% chance for 1 to 20 single 
	{
		return d; //return score
	} 
	else if (r > 70 && r <= 80) //10% chance for scoring left
	{
		return board.GetAtPosition(0,d); //return score to the left
	} 
	else if (r > 80 && r <= 90 ) //10% chance for scoring right
	{
		return board.GetAtPosition(1,d); //return score to the right
	} 
	else if (r > 90 && r <= 95) //5% chance for scoring double
	{
		HitDouble = true;
		return 2 * d; //return double score
	}
	else //5% chance for scoring triple
	{
		HitTriple = true;
		return 3 * d; //return triple score
	}
}

uint16_t Player::ThrowDouble(uint16_t d, const Board& board)
{
	//return result of throwing for single d
	//d is the score that the player is aiming for

	uint16_t r = (rand() % 100 + 1);

	if (r <= 70) // 70% chance for double
	{
		HitDouble = true;
		return 2 * d; //return double score
	}
	else if (r > 70 && r <= 80) //10% chance for scoring double left
	{
		return 2 * board.GetAtPosition(0, d); //return double score to the left
	}
	else if (r > 80 && r <= 90) //10% chance for scoring double right
	{
		return 2 * board.GetAtPosition(1, d); //return double score to the right
	}
	else //10% chance for scoring single
	{
		return d; //return single score
	}
}

uint16_t Player::ThrowTriple(uint16_t d, const Board& board)
{
	//return result of throwing for single d
	//d is the score that the player is aiming for

	uint16_t r = (rand() % 100 + 1);

	if (r <= 70) // 70% chance for triple
	{
		return 3 * d; //return triple score
	}
	else if (r > 70 && r <= 80) //10% chance for scoring triple left
	{
		return 3 * board.GetAtPosition(0, d); //return triple score to the left
	}
	else if (r > 80 && r <= 90) //10% chance for scoring triple right
	{
		return 3 * board.GetAtPosition(1, d); //return triple score to the right
	}
	else if (r > 90 && r <= 95) //5% chance for scoring single left
	{
		return board.GetAtPosition(0, d);
	}
	else //5% chance for scoring single right
	{
		return board.GetAtPosition(1, d);
	}
}

uint16_t Player::ThrowBull(uint16_t percentage)
{
	//  Throw for the bull with given accuracy
	int r = (rand() % 100 + 1);

	if (r <= percentage) //happens with custom percentage chance
	{
		return BULL;
	}
	else if (r > percentage && r < percentage + 20) //happens with 20% chance
	{
		return OUTER;
	}
	else //happens with left percentage
	{
		return (rand() % 20 + 1);
	}
}